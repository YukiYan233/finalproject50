---
title: "Final Project: California's Wildfire Policies Impact on Community Economics Focus: Property Damage, Insurance Costs, and Recovery Expenses"
author: "Team 50"
date: today
format: 
  pdf:
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
include-before-body:
  text: |
    \RecustomVerbatimEnvironment{verbatim}{Verbatim}{
      showspaces = false,
      showtabs = false,
      breaksymbolleft={},
      breaklines
    }
---
1. Introduction
Background: Overview of California’s wildfire challenges and their economic repercussions.
Problem Statement: The intersection of wildfire policies and their economic impacts on property damage, insurance costs, and recovery expenses.
Objectives:
Quantify wildfire impacts on community economics.
Evaluate the effectiveness of wildfire-related policies using reproducible coding methodologies.


2. Literature Review 
# Wildfire Trends: Review of increasing frequency and severity of wildfires in California
```{python}
!pip install geopandas
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


file_path = 'postfire.csv' 
df = pd.read_csv(file_path)
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

# wildfire dataset
file_path = 'postfire.csv'  # Replace with your actual file path
df = pd.read_csv(file_path)

# need to clean "*"
df.columns = df.columns.str.strip().str.replace(r'\* ', '', regex=True)

# aggregate by county
wildfire_counts = df['County'].value_counts().reset_index()  # Get case counts
wildfire_counts.columns = ['County', 'Cases']

# we want to use shapefile to visualize the data in map
shapefile_path = 'CA_Counties.shp' 
california_map = gpd.read_file(shapefile_path)
california_map['County'] = california_map['NAME']

merged_map = california_map.merge(wildfire_counts, on='County', how='left')

fig, ax = plt.subplots(1, 1, figsize=(20, 15))
merged_map.boundary.plot(ax=ax, linewidth=0.8, color='black') 
merged_map.plot(
    column='Cases',
    cmap='Reds',  # Use a darker colormap for severity
    legend=True,
    legend_kwds={
        'label': "Number of Wildfire Cases by County",
        'orientation': "vertical"
    },
    ax=ax,
    missing_kwds={
        "color": "lightgrey",
        "label": "No data"
    }
)

for idx, row in merged_map.iterrows():
    if pd.notna(row['Cases']) and row['Cases'] > 5:  # Only label counties with more than 5 cases
        plt.annotate(
            text=f"{row['County']}\n{int(row['Cases'])} cases",
            xy=(row.geometry.centroid.x, row.geometry.centroid.y),
            horizontalalignment='center',
            fontsize=6,  # Reduced font size
            color='black',
            weight='bold'
        )

# Title and annotations
ax.set_title('Wildfire Cases in California by County', fontsize=22)  # Enlarged title
ax.axis('off')

plt.annotate("Counties without data shown in grey", xy=(0.1, 0.02), xycoords='figure fraction', fontsize=12)

plt.show()
output_list = []

for idx, row in merged_map.iterrows():
    if pd.notna(row['Cases']):
        output_list.append(f"{row['County']}: {int(row['Cases'])} cases")
    else:
        output_list.append(f"{row['County']}: No data")

for item in output_list:
    print(item)

```


Economic Impacts: Insights from prior research into property damage, insurance, and recovery dynamics.

# Air quality: Negative impact of wild fire
# 2019
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data_2019 = pd.read_csv('2019airquality.csv')
print(data_2019.head())

data_2019['Date Time'] = pd.to_datetime(data_2019['Date Time'])

columns_to_keep = ["Date Time", "Value"]
data_2019 = data_2019[columns_to_keep]

data_2019['Month'] = data_2019['Date Time'].dt.month

monthly_pm25_2019 = data_2019.groupby('Month')['Value'].mean().reset_index()

plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_pm25_2019, x="Month", y="Value", marker="o")
plt.title("Monthly Average PM2.5 Trend (2019)")
plt.xlabel("Month")
plt.ylabel("Average PM2.5 Concentration (µg/m³)")
plt.xticks(range(1, 13), [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
])
plt.grid()
plt.tight_layout()
plt.show()

```

# 2020
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('airquality.csv')
data['Date'] = pd.to_datetime(data['Date'])

columns_to_keep = [
    "Date",
    "Daily Mean PM2.5 Concentration",
    "Site Name",
    "CBSA_NAME",
    "STATE",
    "COUNTY"
]
data = data[columns_to_keep]

data.rename(columns={"Daily Mean PM2.5 Concentration": "PM2.5"}, inplace=True)

# 1. Find the most polluted areas by average PM2.5
most_polluted_areas = (
    data.groupby("CBSA_NAME")["PM2.5"]
    .mean()
    .sort_values(ascending=False)
    .reset_index()
)

plt.figure(figsize=(12, 6))
sns.barplot(data=most_polluted_areas, x="PM2.5", y="CBSA_NAME", palette="Reds_r")
plt.title("Most Polluted Areas by Average PM2.5 (2020)")
plt.xlabel("Average PM2.5 Concentration (µg/m³)")
plt.ylabel("CBSA Name")
plt.tight_layout()
plt.show()

# the worst air quality month
data['Month'] = data['Date'].dt.month
monthly_pm25 = data.groupby('Month')['PM2.5'].mean().reset_index()

plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_pm25, x="Month", y="PM2.5", marker="o")
plt.title("Average PM2.5 by Month (2020)")
plt.xlabel("Month")
plt.ylabel("Average PM2.5 Concentration (µg/m³)")
plt.xticks(range(1, 13), [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
])
plt.grid()
plt.tight_layout()
plt.show()

data.to_csv('processed_air_quality_data.csv', index=False)

```

# 2021
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data_2021 = pd.read_csv('Hourly-Records-2021-01-01-to-2021-12-31.csv')

print(data_2021.head())

data_2021['MeasurementStartTime'] = pd.to_datetime(data_2021['MeasurementStartTime'])

columns_to_keep = ["MeasurementStartTime", "MeasuredValue"]
data_2021 = data_2021[columns_to_keep]

data_2021['Month'] = data_2021['MeasurementStartTime'].dt.month

monthly_pm25_2021 = data_2021.groupby('Month')['MeasuredValue'].mean().reset_index()

plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_pm25_2021, x="Month", y="MeasuredValue", marker="o")
plt.title("Monthly Average PM2.5 Trend (2021)")
plt.xlabel("Month")
plt.ylabel("Average PM2.5 Concentration (µg/m³)")
plt.xticks(range(1, 13), [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
])
plt.grid()
plt.tight_layout()
plt.show()

```

#2022
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data_2022 = pd.read_csv('Hourly-Records-2022-01-01-to-2022-12-31.csv')

print(data_2022.head())

data_2022['MeasurementStartTime'] = pd.to_datetime(data_2022['MeasurementStartTime'])

columns_to_keep = ["MeasurementStartTime", "MeasuredValue"]
data_2022 = data_2022[columns_to_keep]

data_2022['Month'] = data_2022['MeasurementStartTime'].dt.month

monthly_pm25_2022 = data_2022.groupby('Month')['MeasuredValue'].mean().reset_index()

plt.figure(figsize=(10, 6))
sns.lineplot(data=monthly_pm25_2022, x="Month", y="MeasuredValue", marker="o")
plt.title("Monthly Average PM2.5 Trend (2022)")
plt.xlabel("Month")
plt.ylabel("Average PM2.5 Concentration (µg/m³)")
plt.xticks(range(1, 13), [
    "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
])
plt.grid()
plt.tight_layout()
plt.show()

```

# Respiratory Prevalence
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv('asthmaprevalence.csv')

columns_to_keep = ['Year', 'Percent']
data = data[columns_to_keep]
data = data[(data['Year'] >= 2014) & (data['Year'] <= 2022)]

data['Year'] = data['Year'].astype(int)
data['Percent'] = data['Percent'].astype(float)

data = data.sort_values(by='Year')

# Box Plot used. The data contains the 95% CI
plt.figure(figsize=(10, 6))
sns.boxplot(data=data, x='Year', y='Percent', palette='coolwarm')

plt.title('Respiratory Disease Prevalence Distribution by Year (2014-2022)', fontsize=16)
plt.xlabel('Year', fontsize=14)
plt.ylabel('Respiratory Disease Prevalence (%)', fontsize=14)
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

plt.show()

```

